// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

WINRT_EXPORT namespace winrt::Windows::Perception::Spatial {

struct SpatialAnchor;

}

WINRT_EXPORT namespace winrt::Microsoft::Azure::SpatialAnchors {

enum class AnchorDataCategory : uint32_t
{
    None = 0x0,
    Properties = 0x1,
    Spatial = 0x2,
};

enum class CloudSpatialErrorCode : int32_t
{
    MetadataTooLarge = 0,
    ApplicationNotAuthenticated = 1,
    ApplicationNotAuthorized = 2,
    ConcurrencyViolation = 3,
    NotEnoughSpatialData = 4,
    NoSpatialLocationHint = 5,
    CannotConnectToServer = 6,
    ServerError = 7,
    AlreadyAssociatedWithADifferentStore = 8,
    AlreadyExists = 9,
    NoLocateCriteriaSpecified = 10,
    NoAccessTokenSpecified = 11,
    UnableToObtainAccessToken = 12,
    TooManyRequests = 13,
    LocateCriteriaMissingRequiredValues = 14,
    LocateCriteriaInConflict = 15,
    LocateCriteriaInvalid = 16,
    LocateCriteriaNotSupported = 17,
    Unknown = 18,
};

enum class LocateAnchorStatus : int32_t
{
    AlreadyTracked = 0,
    Located = 1,
    NotLocated = 2,
    NotLocatedAnchorDoesNotExist = 3,
};

enum class LocateStrategy : int32_t
{
    AnyStrategy = 0,
    VisualInformation = 1,
    Relationship = 2,
};

enum class SessionLogLevel : int32_t
{
    None = 0,
    Error = 1,
    Warning = 2,
    Information = 3,
    Debug = 4,
    All = 5,
};

enum class SessionUserFeedback : uint32_t
{
    None = 0x0,
    NotEnoughMotion = 0x1,
    MotionTooQuick = 0x2,
    NotEnoughFeatures = 0x4,
};

struct IAnchorLocateCriteria;
struct IAnchorLocatedEventArgs;
struct ICloudSpatialAnchor;
struct ICloudSpatialAnchorSession;
struct ICloudSpatialAnchorSessionDeferral;
struct ICloudSpatialAnchorSessionDiagnostics;
struct ICloudSpatialAnchorWatcher;
struct ILocateAnchorsCompletedEventArgs;
struct INearAnchorCriteria;
struct IOnLogDebugEventArgs;
struct ISessionConfiguration;
struct ISessionErrorEventArgs;
struct ISessionStatus;
struct ISessionUpdatedEventArgs;
struct ISpatialAnchorsFactory;
struct ITokenRequiredEventArgs;
struct AnchorLocateCriteria;
struct AnchorLocatedEventArgs;
struct CloudSpatialAnchor;
struct CloudSpatialAnchorSession;
struct CloudSpatialAnchorSessionDeferral;
struct CloudSpatialAnchorSessionDiagnostics;
struct CloudSpatialAnchorWatcher;
struct LocateAnchorsCompletedEventArgs;
struct NearAnchorCriteria;
struct OnLogDebugEventArgs;
struct SessionConfiguration;
struct SessionErrorEventArgs;
struct SessionStatus;
struct SessionUpdatedEventArgs;
struct SpatialAnchorsFactory;
struct TokenRequiredEventArgs;
struct AnchorLocatedDelegate;
struct LocateAnchorsCompletedDelegate;
struct OnLogDebugDelegate;
struct SessionErrorDelegate;
struct SessionUpdatedDelegate;
struct TokenRequiredDelegate;

}

namespace winrt::impl {

template<> struct is_enum_flag<Microsoft::Azure::SpatialAnchors::AnchorDataCategory> : std::true_type {};
template<> struct is_enum_flag<Microsoft::Azure::SpatialAnchors::SessionUserFeedback> : std::true_type {};
template <> struct category<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ISessionConfiguration>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ISessionStatus>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ISpatialAnchorsFactory>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::AnchorLocateCriteria>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::AnchorLocatedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSession>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDeferral>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDiagnostics>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::NearAnchorCriteria>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::OnLogDebugEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::SessionConfiguration>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::SessionErrorEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::SessionStatus>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::SessionUpdatedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::SpatialAnchorsFactory>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::TokenRequiredEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::AnchorDataCategory>{ using type = enum_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialErrorCode>{ using type = enum_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::LocateAnchorStatus>{ using type = enum_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::LocateStrategy>{ using type = enum_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::SessionLogLevel>{ using type = enum_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::SessionUserFeedback>{ using type = enum_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate>{ using type = delegate_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate>{ using type = delegate_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate>{ using type = delegate_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::SessionErrorDelegate>{ using type = delegate_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate>{ using type = delegate_category; };
template <> struct category<Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate>{ using type = delegate_category; };
template <> struct name<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.IAnchorLocateCriteria" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.IAnchorLocatedEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchor" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchorSession" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchorSessionDeferral" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchorSessionDiagnostics" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchorWatcher" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ILocateAnchorsCompletedEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.INearAnchorCriteria" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.IOnLogDebugEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ISessionConfiguration>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ISessionConfiguration" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ISessionErrorEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ISessionStatus>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ISessionStatus" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ISessionUpdatedEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ISpatialAnchorsFactory>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ISpatialAnchorsFactory" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.ITokenRequiredEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::AnchorLocateCriteria>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.AnchorLocateCriteria" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::AnchorLocatedEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.AnchorLocatedEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchor" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSession>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchorSession" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDeferral>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchorSessionDeferral" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDiagnostics>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchorSessionDiagnostics" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchorWatcher" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.LocateAnchorsCompletedEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::NearAnchorCriteria>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.NearAnchorCriteria" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::OnLogDebugEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.OnLogDebugEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::SessionConfiguration>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.SessionConfiguration" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::SessionErrorEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.SessionErrorEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::SessionStatus>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.SessionStatus" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::SessionUpdatedEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.SessionUpdatedEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::SpatialAnchorsFactory>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.SpatialAnchorsFactory" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::TokenRequiredEventArgs>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.TokenRequiredEventArgs" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::AnchorDataCategory>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.AnchorDataCategory" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::CloudSpatialErrorCode>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.CloudSpatialErrorCode" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::LocateAnchorStatus>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.LocateAnchorStatus" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::LocateStrategy>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.LocateStrategy" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::SessionLogLevel>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.SessionLogLevel" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::SessionUserFeedback>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.SessionUserFeedback" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.AnchorLocatedDelegate" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.LocateAnchorsCompletedDelegate" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.OnLogDebugDelegate" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::SessionErrorDelegate>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.SessionErrorDelegate" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.SessionUpdatedDelegate" }; };
template <> struct name<Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate>{ static constexpr auto & value{ L"Microsoft.Azure.SpatialAnchors.TokenRequiredDelegate" }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria>{ static constexpr guid value{ 0xD2562F92,0x743D,0x53D1,{ 0xB6,0xB7,0xE0,0xB7,0x37,0x0C,0xC5,0x83 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs>{ static constexpr guid value{ 0x081B97B3,0xB0D2,0x5CD9,{ 0x84,0x58,0xE0,0x73,0x50,0x80,0x65,0xC7 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor>{ static constexpr guid value{ 0x73A3FD59,0xF1E3,0x55FB,{ 0x87,0xC4,0xB9,0x56,0x04,0xFD,0xCE,0xA7 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>{ static constexpr guid value{ 0xB4E6BE96,0xC144,0x5904,{ 0x8F,0xEE,0x32,0x4A,0xF2,0x01,0xA0,0x8E } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral>{ static constexpr guid value{ 0x165EF7E4,0xC1A1,0x52F0,{ 0x85,0x01,0x72,0x27,0x5C,0x9E,0x32,0x05 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics>{ static constexpr guid value{ 0x6AE03033,0xDA1B,0x50EF,{ 0x9D,0xCE,0x00,0x6F,0x06,0xCE,0x41,0xE8 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher>{ static constexpr guid value{ 0x57BA688B,0xC6A8,0x5045,{ 0x9E,0x60,0x73,0x8D,0x3B,0xF7,0x3F,0x68 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs>{ static constexpr guid value{ 0xA9301B24,0xFBBB,0x5FF9,{ 0x9E,0xFA,0x36,0x73,0xA4,0xE0,0xC8,0xD6 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria>{ static constexpr guid value{ 0x4F4FE473,0x8C98,0x5B3E,{ 0xA5,0x1B,0xF1,0x00,0x16,0x95,0xD0,0x2F } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs>{ static constexpr guid value{ 0xACF6C60A,0xD872,0x58DC,{ 0xA5,0xEC,0xBF,0x1F,0xA1,0x73,0x92,0x33 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ISessionConfiguration>{ static constexpr guid value{ 0xB2164E62,0xC951,0x54CE,{ 0xAB,0x93,0xCC,0xEC,0xDC,0x37,0x6D,0x1D } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs>{ static constexpr guid value{ 0x5AF79874,0x30C4,0x556A,{ 0xB1,0xA1,0x35,0xB3,0xC1,0xA6,0x99,0x8C } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ISessionStatus>{ static constexpr guid value{ 0xF103B184,0xED9D,0x5DA5,{ 0x92,0x69,0xE3,0x1D,0x65,0xEC,0xB7,0x06 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs>{ static constexpr guid value{ 0x735C5193,0xB627,0x5A24,{ 0xBE,0x9C,0xDC,0x19,0x98,0xA3,0x98,0xC2 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ISpatialAnchorsFactory>{ static constexpr guid value{ 0xF7E6CBD0,0x4260,0x522A,{ 0x93,0x80,0xEF,0x80,0x90,0x66,0x03,0xF8 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs>{ static constexpr guid value{ 0x8D8BD6A9,0x38D6,0x564E,{ 0x98,0x13,0x91,0x1B,0x14,0x6A,0xBE,0x5C } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate>{ static constexpr guid value{ 0x27B10D8A,0xF58D,0x51C8,{ 0x8D,0x42,0x8A,0x4E,0x29,0x51,0x78,0xCC } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate>{ static constexpr guid value{ 0x773D1C23,0x0334,0x5DDF,{ 0x97,0x2F,0x80,0x1E,0x8C,0xF1,0x8F,0x54 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate>{ static constexpr guid value{ 0x9518A28D,0xC48D,0x51A4,{ 0xAE,0x0F,0xC1,0xD4,0x54,0xFB,0x0D,0x19 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::SessionErrorDelegate>{ static constexpr guid value{ 0xFEA2D1E3,0xAD2E,0x5D82,{ 0xAB,0x41,0x5F,0xE4,0xCE,0x30,0xE9,0x04 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate>{ static constexpr guid value{ 0x7DD43183,0x8A15,0x5D25,{ 0xB1,0x4B,0xA8,0x40,0x52,0xF5,0x00,0xC1 } }; };
template <> struct guid_storage<Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate>{ static constexpr guid value{ 0xAB764891,0x9071,0x5ADA,{ 0xA8,0x59,0xB0,0x2E,0xFF,0x5A,0x29,0x69 } }; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::AnchorLocateCriteria>{ using type = Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::AnchorLocatedEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSession>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDeferral>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDiagnostics>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::NearAnchorCriteria>{ using type = Microsoft::Azure::SpatialAnchors::INearAnchorCriteria; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::OnLogDebugEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SessionConfiguration>{ using type = Microsoft::Azure::SpatialAnchors::ISessionConfiguration; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SessionErrorEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SessionStatus>{ using type = Microsoft::Azure::SpatialAnchors::ISessionStatus; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SessionUpdatedEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SpatialAnchorsFactory>{ using type = Microsoft::Azure::SpatialAnchors::ISpatialAnchorsFactory; };
template <> struct default_interface<Microsoft::Azure::SpatialAnchors::TokenRequiredEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs; };

template <> struct abi<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Identifiers(uint32_t* __valueSize, void*** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Identifiers(uint32_t __valueSize, void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_BypassCache(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_BypassCache(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL get_NearAnchor(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_NearAnchor(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_RequestedCategories(Microsoft::Azure::SpatialAnchors::AnchorDataCategory* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_RequestedCategories(Microsoft::Azure::SpatialAnchors::AnchorDataCategory value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Strategy(Microsoft::Azure::SpatialAnchors::LocateStrategy* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Strategy(Microsoft::Azure::SpatialAnchors::LocateStrategy value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Anchor(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Identifier(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Status(Microsoft::Azure::SpatialAnchors::LocateAnchorStatus* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Watcher(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_LocalAnchor(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_LocalAnchor(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Expiration(Windows::Foundation::DateTime* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_Expiration(Windows::Foundation::DateTime value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Identifier(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AppProperties(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_VersionTag(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Configuration(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Diagnostics(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_LogLevel(Microsoft::Azure::SpatialAnchors::SessionLogLevel* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_LogLevel(Microsoft::Azure::SpatialAnchors::SessionLogLevel value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SessionId(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL add_TokenRequired(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_TokenRequired(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_AnchorLocated(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_AnchorLocated(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_LocateAnchorsCompleted(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_LocateAnchorsCompleted(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_SessionUpdated(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_SessionUpdated(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_Error(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_Error(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL add_OnLogDebug(void* handler, winrt::event_token* token) noexcept = 0;
    virtual int32_t WINRT_CALL remove_OnLogDebug(winrt::event_token token) noexcept = 0;
    virtual int32_t WINRT_CALL Dispose() noexcept = 0;
    virtual int32_t WINRT_CALL GetAccessTokenWithAuthenticationTokenAsync(void* authenticationToken, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL GetAccessTokenWithAccountKeyAsync(void* accountKey, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL CreateAnchorAsync(void* anchor, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL CreateWatcher(void* criteria, void** result) noexcept = 0;
    virtual int32_t WINRT_CALL GetAnchorPropertiesAsync(void* identifier, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL GetActiveWatchers(void** result) noexcept = 0;
    virtual int32_t WINRT_CALL RefreshAnchorPropertiesAsync(void* anchor, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL UpdateAnchorPropertiesAsync(void* anchor, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL DeleteAnchorAsync(void* anchor, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL GetSessionStatusAsync(void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL Start() noexcept = 0;
    virtual int32_t WINRT_CALL Stop() noexcept = 0;
    virtual int32_t WINRT_CALL Reset() noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL Complete() noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_LogLevel(Microsoft::Azure::SpatialAnchors::SessionLogLevel* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_LogLevel(Microsoft::Azure::SpatialAnchors::SessionLogLevel value) noexcept = 0;
    virtual int32_t WINRT_CALL get_LogDirectory(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_LogDirectory(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxDiskSizeInMB(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxDiskSizeInMB(int32_t value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ImagesEnabled(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_ImagesEnabled(bool value) noexcept = 0;
    virtual int32_t WINRT_CALL CreateManifestAsync(void* description, void** operation) noexcept = 0;
    virtual int32_t WINRT_CALL SubmitManifestAsync(void* manifestPath, void** operation) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Identifier(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL Stop() noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Cancelled(bool* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Watcher(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_SourceAnchor(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_SourceAnchor(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_DistanceInMeters(float* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_DistanceInMeters(float value) noexcept = 0;
    virtual int32_t WINRT_CALL get_MaxResultCount(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MaxResultCount(int32_t value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Message(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ISessionConfiguration>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_AccountDomain(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_AccountDomain(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AccountId(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_AccountId(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AuthenticationToken(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_AuthenticationToken(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AccountKey(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_AccountKey(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AccessToken(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_AccessToken(void* value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ErrorCode(Microsoft::Azure::SpatialAnchors::CloudSpatialErrorCode* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_ErrorMessage(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL get_Watcher(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ISessionStatus>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_ReadyForCreateProgress(float* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_RecommendedForCreateProgress(float* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SessionCreateHash(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_SessionLocateHash(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_UserFeedback(Microsoft::Azure::SpatialAnchors::SessionUserFeedback* value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_Status(void** value) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ISpatialAnchorsFactory>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL CreateAnchorLocateCriteria(void** result) noexcept = 0;
    virtual int32_t WINRT_CALL CreateCloudSpatialAnchor(void** result) noexcept = 0;
    virtual int32_t WINRT_CALL CreateCloudSpatialAnchorSession(void** result) noexcept = 0;
    virtual int32_t WINRT_CALL CreateNearAnchorCriteria(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_AccessToken(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_AccessToken(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL get_AuthenticationToken(void** value) noexcept = 0;
    virtual int32_t WINRT_CALL put_AuthenticationToken(void* value) noexcept = 0;
    virtual int32_t WINRT_CALL GetDeferral(void** result) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate>{ struct type : IUnknown
{
    virtual int32_t WINRT_CALL Invoke(void* sender, void* args) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate>{ struct type : IUnknown
{
    virtual int32_t WINRT_CALL Invoke(void* sender, void* args) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate>{ struct type : IUnknown
{
    virtual int32_t WINRT_CALL Invoke(void* sender, void* args) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::SessionErrorDelegate>{ struct type : IUnknown
{
    virtual int32_t WINRT_CALL Invoke(void* sender, void* args) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate>{ struct type : IUnknown
{
    virtual int32_t WINRT_CALL Invoke(void* sender, void* args) noexcept = 0;
};};

template <> struct abi<Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate>{ struct type : IUnknown
{
    virtual int32_t WINRT_CALL Invoke(void* sender, void* args) noexcept = 0;
};};

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_IAnchorLocateCriteria
{
    com_array<hstring> Identifiers() const;
    void Identifiers(array_view<hstring const> value) const;
    bool BypassCache() const;
    void BypassCache(bool value) const;
    Microsoft::Azure::SpatialAnchors::NearAnchorCriteria NearAnchor() const;
    void NearAnchor(Microsoft::Azure::SpatialAnchors::NearAnchorCriteria const& value) const;
    Microsoft::Azure::SpatialAnchors::AnchorDataCategory RequestedCategories() const;
    void RequestedCategories(Microsoft::Azure::SpatialAnchors::AnchorDataCategory const& value) const;
    Microsoft::Azure::SpatialAnchors::LocateStrategy Strategy() const;
    void Strategy(Microsoft::Azure::SpatialAnchors::LocateStrategy const& value) const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_IAnchorLocateCriteria<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_IAnchorLocatedEventArgs
{
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor Anchor() const;
    hstring Identifier() const;
    Microsoft::Azure::SpatialAnchors::LocateAnchorStatus Status() const;
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher Watcher() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_IAnchorLocatedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchor
{
    Windows::Perception::Spatial::SpatialAnchor LocalAnchor() const;
    void LocalAnchor(Windows::Perception::Spatial::SpatialAnchor const& value) const;
    Windows::Foundation::DateTime Expiration() const;
    void Expiration(Windows::Foundation::DateTime const& value) const;
    hstring Identifier() const;
    Windows::Foundation::Collections::IMap<hstring, hstring> AppProperties() const;
    hstring VersionTag() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchor<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSession
{
    Microsoft::Azure::SpatialAnchors::SessionConfiguration Configuration() const;
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDiagnostics Diagnostics() const;
    Microsoft::Azure::SpatialAnchors::SessionLogLevel LogLevel() const;
    void LogLevel(Microsoft::Azure::SpatialAnchors::SessionLogLevel const& value) const;
    hstring SessionId() const;
    winrt::event_token TokenRequired(Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate const& handler) const;
    using TokenRequired_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_TokenRequired>;
    TokenRequired_revoker TokenRequired(auto_revoke_t, Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate const& handler) const;
    void TokenRequired(winrt::event_token const& token) const noexcept;
    winrt::event_token AnchorLocated(Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate const& handler) const;
    using AnchorLocated_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_AnchorLocated>;
    AnchorLocated_revoker AnchorLocated(auto_revoke_t, Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate const& handler) const;
    void AnchorLocated(winrt::event_token const& token) const noexcept;
    winrt::event_token LocateAnchorsCompleted(Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate const& handler) const;
    using LocateAnchorsCompleted_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_LocateAnchorsCompleted>;
    LocateAnchorsCompleted_revoker LocateAnchorsCompleted(auto_revoke_t, Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate const& handler) const;
    void LocateAnchorsCompleted(winrt::event_token const& token) const noexcept;
    winrt::event_token SessionUpdated(Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate const& handler) const;
    using SessionUpdated_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_SessionUpdated>;
    SessionUpdated_revoker SessionUpdated(auto_revoke_t, Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate const& handler) const;
    void SessionUpdated(winrt::event_token const& token) const noexcept;
    winrt::event_token Error(Microsoft::Azure::SpatialAnchors::SessionErrorDelegate const& handler) const;
    using Error_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_Error>;
    Error_revoker Error(auto_revoke_t, Microsoft::Azure::SpatialAnchors::SessionErrorDelegate const& handler) const;
    void Error(winrt::event_token const& token) const noexcept;
    winrt::event_token OnLogDebug(Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate const& handler) const;
    using OnLogDebug_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_OnLogDebug>;
    OnLogDebug_revoker OnLogDebug(auto_revoke_t, Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate const& handler) const;
    void OnLogDebug(winrt::event_token const& token) const noexcept;
    void Dispose() const;
    Windows::Foundation::IAsyncOperation<hstring> GetAccessTokenWithAuthenticationTokenAsync(param::hstring const& authenticationToken) const;
    Windows::Foundation::IAsyncOperation<hstring> GetAccessTokenWithAccountKeyAsync(param::hstring const& accountKey) const;
    Windows::Foundation::IAsyncAction CreateAnchorAsync(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& anchor) const;
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher CreateWatcher(Microsoft::Azure::SpatialAnchors::AnchorLocateCriteria const& criteria) const;
    Windows::Foundation::IAsyncOperation<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor> GetAnchorPropertiesAsync(param::hstring const& identifier) const;
    Windows::Foundation::Collections::IVectorView<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher> GetActiveWatchers() const;
    Windows::Foundation::IAsyncAction RefreshAnchorPropertiesAsync(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& anchor) const;
    Windows::Foundation::IAsyncAction UpdateAnchorPropertiesAsync(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& anchor) const;
    Windows::Foundation::IAsyncAction DeleteAnchorAsync(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& anchor) const;
    Windows::Foundation::IAsyncOperation<Microsoft::Azure::SpatialAnchors::SessionStatus> GetSessionStatusAsync() const;
    void Start() const;
    void Stop() const;
    void Reset() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSession<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSessionDeferral
{
    void Complete() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSessionDeferral<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSessionDiagnostics
{
    Microsoft::Azure::SpatialAnchors::SessionLogLevel LogLevel() const;
    void LogLevel(Microsoft::Azure::SpatialAnchors::SessionLogLevel const& value) const;
    hstring LogDirectory() const;
    void LogDirectory(param::hstring const& value) const;
    int32_t MaxDiskSizeInMB() const;
    void MaxDiskSizeInMB(int32_t value) const;
    bool ImagesEnabled() const;
    void ImagesEnabled(bool value) const;
    Windows::Foundation::IAsyncOperation<hstring> CreateManifestAsync(param::hstring const& description) const;
    Windows::Foundation::IAsyncAction SubmitManifestAsync(param::hstring const& manifestPath) const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSessionDiagnostics<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorWatcher
{
    int32_t Identifier() const;
    void Stop() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorWatcher<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ILocateAnchorsCompletedEventArgs
{
    bool Cancelled() const;
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher Watcher() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ILocateAnchorsCompletedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_INearAnchorCriteria
{
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor SourceAnchor() const;
    void SourceAnchor(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& value) const;
    float DistanceInMeters() const;
    void DistanceInMeters(float value) const;
    int32_t MaxResultCount() const;
    void MaxResultCount(int32_t value) const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_INearAnchorCriteria<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_IOnLogDebugEventArgs
{
    hstring Message() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_IOnLogDebugEventArgs<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ISessionConfiguration
{
    hstring AccountDomain() const;
    void AccountDomain(param::hstring const& value) const;
    hstring AccountId() const;
    void AccountId(param::hstring const& value) const;
    hstring AuthenticationToken() const;
    void AuthenticationToken(param::hstring const& value) const;
    hstring AccountKey() const;
    void AccountKey(param::hstring const& value) const;
    hstring AccessToken() const;
    void AccessToken(param::hstring const& value) const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ISessionConfiguration> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISessionConfiguration<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ISessionErrorEventArgs
{
    Microsoft::Azure::SpatialAnchors::CloudSpatialErrorCode ErrorCode() const;
    hstring ErrorMessage() const;
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher Watcher() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISessionErrorEventArgs<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ISessionStatus
{
    float ReadyForCreateProgress() const;
    float RecommendedForCreateProgress() const;
    int32_t SessionCreateHash() const;
    int32_t SessionLocateHash() const;
    Microsoft::Azure::SpatialAnchors::SessionUserFeedback UserFeedback() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ISessionStatus> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISessionStatus<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ISessionUpdatedEventArgs
{
    Microsoft::Azure::SpatialAnchors::SessionStatus Status() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISessionUpdatedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ISpatialAnchorsFactory
{
    Microsoft::Azure::SpatialAnchors::AnchorLocateCriteria CreateAnchorLocateCriteria() const;
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor CreateCloudSpatialAnchor() const;
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSession CreateCloudSpatialAnchorSession() const;
    Microsoft::Azure::SpatialAnchors::NearAnchorCriteria CreateNearAnchorCriteria() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ISpatialAnchorsFactory> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISpatialAnchorsFactory<D>; };

template <typename D>
struct consume_Microsoft_Azure_SpatialAnchors_ITokenRequiredEventArgs
{
    hstring AccessToken() const;
    void AccessToken(param::hstring const& value) const;
    hstring AuthenticationToken() const;
    void AuthenticationToken(param::hstring const& value) const;
    Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDeferral GetDeferral() const;
};
template <> struct consume<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs> { template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ITokenRequiredEventArgs<D>; };

}
